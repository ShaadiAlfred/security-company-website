/*global $, window*/
$.fn.editableTableWidget = function (options) {
    'use strict';
    return $(this).each(function () {
        var buildDefaultOptions = function () {
                var opts = $.extend({}, $.fn.editableTableWidget.defaultOptions);
                opts.editor = opts.editor.clone();
                return opts;
            },
            activeOptions = $.extend(buildDefaultOptions(), options),
            ARROW_LEFT = 37, ARROW_UP = 38, ARROW_RIGHT = 39, ARROW_DOWN = 40, ENTER = 13, ESC = 27, TAB = 9,
            element = $(this),
            editor = activeOptions.editor.css('position', 'absolute').hide().appendTo(element.parent()),
            selectboxes = {},
            selectboxColumns = Object.keys(activeOptions.selectboxOptions).map(x => parseInt(x)),
            activeSelectbox,
            createSelectboxes = function () {
                if (selectboxColumns.length) {
                    selectboxColumns.forEach(selectboxColumn => {
                        selectboxes[selectboxColumn] = $('<select></select>')
                            .css('position', 'absolute')
                            .hide()
                            .appendTo(element.parent());

                        const currentSelectboxOptions = activeOptions.selectboxOptions[selectboxColumn];

                        currentSelectboxOptions.forEach(option => {
                            $(`<option value="${option.value}">${option.text}</option>`)
                                .appendTo(selectboxes[selectboxColumn]);
                        });

                    });
                }
            },
            active,
            showEditor = function (select) {
                active = element.find('td:focus');

                if (activeOptions.disabledColumns.length > 0) {
                    if (activeOptions.disabledColumns.includes($(active).index())) {
                        return;
                    }
                }

                if (selectboxColumns.includes(active.index())) {
                    if (activeSelectbox) {
                        activeSelectbox.hide();
                    }

                    activeSelectbox = selectboxes[active.index()];

                    activeSelectbox.show()
                                   .offset(active.offset())
                                   .css(active.css(activeOptions.cloneProperties))
                                   .width('auto')
                                   .height('auto')
                                   .focus();

                    activeSelectbox.val(active.data('id'));

                    editor.hide();
                } else {
                    if (activeSelectbox) {
                        activeSelectbox.hide();
                    }

                    if (active.length) {
                        editor.val(active.text())
                              .removeClass('error')
                              .show()
                              .offset(active.offset())
                              .css(active.css(activeOptions.cloneProperties))
                              .width(active.width())
                              .height(active.height())
                              .focus();
                        if (select) {
                            editor.select();
                        }
                    }
                }

            },
            setActiveOption = function () {
                var text = selectboxes[active.index()].children('option:selected').text(),
                    value = selectboxes[active.index()].val(),
                    evt = $.Event('change'),
                    originalContent;
                if (active.text() === text) {
                    return true;
                }
                originalContent = active.html();
                active.text(text).trigger(evt, value);
                if (evt.result === false) {
                    active.html(originalContent);
                    return;
                }
                active.data('id', value);

            },
            setActiveText = function () {
                var text = editor.val(),
                    evt = $.Event('change'),
                    originalContent;
                if (active.text() === text || editor.hasClass('error')) {
                    return true;
                }
                originalContent = active.html();
                active.text(text).trigger(evt, text);
                if (evt.result === false) {
                    active.html(originalContent);
                }
            },
            movement = function (element, keycode) {
                if (keycode === ARROW_RIGHT) {
                    return element.next('td');
                } else if (keycode === ARROW_LEFT) {
                    return element.prev('td');
                } else if (keycode === ARROW_UP) {
                    return element.parent().prev().children().eq(element.index());
                } else if (keycode === ARROW_DOWN) {
                    return element.parent().next().children().eq(element.index());
                }
                return [];
            };

        createSelectboxes();

        if (selectboxColumns.length) {
            selectboxColumns.forEach(selectboxColumn => {
                selectboxes[selectboxColumn].on('change', function () {
                    setActiveOption();
                    selectboxes[selectboxColumn].hide();
                });
            })
        }
        editor.blur(function () {
            setActiveText();
            editor.hide();
        }).keydown(function (e) {
            if (e.which === ENTER) {
                setActiveText();
                editor.hide();
                active.focus();
                e.preventDefault();
                e.stopPropagation();
            } else if (e.which === ESC) {
                editor.val(active.text());
                e.preventDefault();
                e.stopPropagation();
                editor.hide();
                active.focus();
            } else if (e.which === TAB) {
                e.preventDefault();
                e.stopPropagation();

                if (active.next('td').length == 0) {
                    let i = 1;
                    let nextActiveElement = active.closest('tr').next().find('td:first-child');

                    while (activeOptions.disabledColumns.includes(nextActiveElement.index())) {
                        nextActiveElement = nextActiveElement.next('td');
                        i++;
                    }

                    nextActiveElement.focus().click();
                } else {
                    let i = 1;
                    let nextActiveElement = active;

                    while (activeOptions.disabledColumns.includes(active.index() + i)) {
                        nextActiveElement = active.next('td');
                        i++;
                    }

                    nextActiveElement.next('td').focus().click();
                }
            } else if (this.selectionEnd - this.selectionStart === this.value.length) {
                var possibleMove = movement(active, e.which);
                if (possibleMove.length > 0) {
                    possibleMove.focus();
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
        })
        .on('input paste', function () {
            var evt = $.Event('validate');
            active.trigger(evt, editor.val());
            if (evt.result === false) {
                editor.addClass('error');
            } else {
                editor.removeClass('error');
            }
        });
        element.on('click keypress dblclick', showEditor)
        .css('cursor', 'pointer')
        .keydown(function (e) {
            var prevent = true,
                possibleMove = movement($(e.target), e.which);
            if (possibleMove.length > 0) {
                possibleMove.focus();
            } else if (e.which === ENTER) {
                showEditor(false);
            } else if (e.which === 17 || e.which === 91 || e.which === 93) {
                showEditor(true);
                prevent = false;
            } else {
                prevent = false;
            }
            if (prevent) {
                e.stopPropagation();
                e.preventDefault();
            }
        });

        element.find('td').prop('tabindex', 1);

        $(window).on('resize', function () {
            if (editor.is(':visible')) {
                editor.offset(active.offset())
                .width(active.width())
                .height(active.height());
            }
        });
    });

};
$.fn.editableTableWidget.defaultOptions = {
    cloneProperties: ['padding', 'padding-top', 'padding-bottom', 'padding-left', 'padding-right',
                      'text-align', 'font', 'font-size', 'font-family', 'font-weight',
                      'border', 'border-top', 'border-bottom', 'border-left', 'border-right'],
    editor: $('<input>'),
    disabledColumns: [],
    selectboxOptions: {
        // 0: [
        //     {
        //         value: null,
        //         text: 'test'
        //     }
        // ]
    }
};
